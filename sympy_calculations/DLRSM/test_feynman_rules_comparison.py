# test_feynman_rules_comparison.py
import sys
import os
from sympy import simplify, symbols

# Ensure the script can find the modules (adjust path if needed)
# Assuming this test script is in the same directory as the modules
module_path = os.path.dirname(__file__)
if module_path not in sys.path:
    sys.path.insert(0, module_path)

print(f"Attempting to import modules from: {module_path}")

try:
    import FeynmanRules_senjanovic_H10_Z1 as original
    print("Successfully imported original module.")
except ImportError as e:
    print(f"Error importing original module: {e}")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred during original module import: {e}")
    sys.exit(1)


try:
    import FeynmanRules_senjanovic_H10_Z1_GM as refactored
    print("Successfully imported refactored module.")
except ImportError as e:
    print(f"Error importing refactored module: {e}")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred during refactored module import: {e}")
    sys.exit(1)


# --- Comparison Helper Function ---

def compare_dictionaries(dict1, dict2, name):
    """Compares two dictionaries containing SymPy expressions."""
    print(f"\n--- Comparing: {name} ---")
    keys1 = set(dict1.keys())
    keys2 = set(dict2.keys())
    all_keys = keys1.union(keys2)
    mismatches = []
    passed = True

    if keys1 != keys2:
        print(f" FAIL: Key sets do not match!")
        missing_in_1 = keys2 - keys1
        missing_in_2 = keys1 - keys2
        if missing_in_1:
            print(f"  Keys missing in original ({len(missing_in_1)}): {missing_in_1}")
        if missing_in_2:
            print(f"  Keys missing in refactored ({len(missing_in_2)}): {missing_in_2}")
        passed = False
        # Continue comparison for common keys

    common_keys = keys1.intersection(keys2)
    print(f" Comparing {len(common_keys)} common keys...")

    for key in sorted(common_keys, key=str): # Sort for consistent output
        val1 = dict1[key]
        val2 = dict2[key]
        try:
            # Robust check for symbolic equality
            diff = simplify(val1 - val2)
            if diff != 0:
                mismatches.append(key)
                passed = False
                print(f"  MISMATCH for key: {key}")
                print(f"    Original:   {val1}")
                print(f"    Refactored: {val2}")
                print(f"    Difference: {diff}")
        except Exception as e:
             mismatches.append(key)
             passed = False
             print(f"  ERROR comparing key: {key}")
             print(f"    Original:   {val1}")
             print(f"    Refactored: {val2}")
             print(f"    Error: {e}")


    if passed:
        print(f" PASS: Dictionaries '{name}' are symbolically equivalent.")
    else:
        print(f" FAIL: Dictionaries '{name}' have differences.")
        if mismatches:
             print(f"   Keys with differing values ({len(mismatches)}): {mismatches}")

    return passed

def compare_lambda_interactions(lambda1, lambda2, indices, name):
    """Compares dictionaries generated by lambda functions for given indices."""
    print(f"\n--- Comparing Lambda Function: {name} ---")
    overall_passed = True
    for index_tuple in indices:
        i, a = index_tuple
        print(f" Testing with indices i={i}, a={a}")
        try:
            dict1 = lambda1(i, a)
            dict2 = lambda2(i, a)
            passed = compare_dictionaries(dict1, dict2, f"{name} (i={i}, a={a})")
            if not passed:
                overall_passed = False
        except Exception as e:
            print(f" ERROR generating or comparing dictionaries for {name} (i={i}, a={a}): {e}")
            overall_passed = False

    if overall_passed:
        print(f" PASS: Lambda function '{name}' produced equivalent results for tested indices.")
    else:
        print(f" FAIL: Lambda function '{name}' produced different results for tested indices.")
    return overall_passed


# --- Main Comparison Logic ---

if __name__ == "__main__":
    all_tests_passed = True
    results = {}

    # List of dictionary names to compare (exact and approx)
    dict_names = [
        "interactionsH10_WW_dict", "interactionsH10_WW_dict_approx",
        "interactionsH10_W1pSm_dict", "interactionsH10_W1pSm_dict_approx",
        "interactionsH10_W2pSm_dict", "interactionsH10_W2pSm_dict_approx",
        "interactionsH10_W1mSp_dict", "interactionsH10_W1mSp_dict_approx",
        "interactionsH10_W2mSp_dict", "interactionsH10_W2mSp_dict_approx",
        "interactionsH10_SS_dict", "interactionsH10_SS_dict_approx",
        "interactionsZ1_VS_dict", "interactionsZ1_VS_dict_approx",
    ]

    for name in dict_names:
        print(f"\nChecking existence of '{name}'...")
        try:
            dict_orig = getattr(original, name)
            dict_refact = getattr(refactored, name)
            print(f" Found '{name}' in both modules.")
            results[name] = compare_dictionaries(dict_orig, dict_refact, name)
            if not results[name]:
                all_tests_passed = False
        except AttributeError as e:
            print(f" SKIP: Attribute '{name}' not found in one or both modules: {e}")
            # Decide if this should be a failure
            # all_tests_passed = False # Uncomment if missing attribute is a failure
        except Exception as e:
            print(f" ERROR accessing or comparing '{name}': {e}")
            all_tests_passed = False


    # List of lambda function names to compare
    lambda_names = [
        "interactionsWp_n_l",
        "interactionsWm_n_l",
        "interactionsSp_n_l",
        "interactionsSm_n_l",
    ]

    # Example indices to test lambda functions (use more if needed)
    test_indices = [(1, 1), (2, 3)] # (i, a) pairs

    for name in lambda_names:
        print(f"\nChecking existence of lambda '{name}'...")
        try:
            lambda_orig = getattr(original, name)
            lambda_refact = getattr(refactored, name)
            print(f" Found lambda '{name}' in both modules.")
            results[name] = compare_lambda_interactions(lambda_orig, lambda_refact, test_indices, name)
            if not results[name]:
                all_tests_passed = False
        except AttributeError as e:
            print(f" SKIP: Lambda function '{name}' not found in one or both modules: {e}")
            # Decide if this should be a failure
            # all_tests_passed = False # Uncomment if missing attribute is a failure
        except Exception as e:
            print(f" ERROR accessing or comparing lambda '{name}': {e}")
            all_tests_passed = False

    # --- Final Summary ---
    print("\n\n--- Comparison Summary ---")
    for name, result in results.items():
        status = "PASS" if result else "FAIL"
        print(f"{name}: {status}")

    print("\n--------------------------")
    if all_tests_passed:
        print("Overall Result: ALL TESTS PASSED! The refactored script matches the original.")
    else:
        print("Overall Result: SOME TESTS FAILED! Differences found between original and refactored scripts.")
    print("--------------------------")

